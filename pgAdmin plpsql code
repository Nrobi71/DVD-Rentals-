--B
CREATE TABLE detailed (
customer_id integer, 
first_name varchar(50),
last_name varchar(50),
email varchar(90),
payment_id integer,
amount numeric(5,2),
rental_id integer
);

-- Verify the Detailed table is created
SELECT * FROM detailed;

--Create the Summary Table
DROP TABLE IF EXISTS summary;
CREATE TABLE summary (
customer_name varchar(100),
email varchar(90),
rentals smallint,
rental_amount numeric(5,2)
);

-- Verify the Summary Table is created
SELECT * FROM summary;

--C
INSERT INTO detailed (
payment_id, amount, rental_id, customer_id, first_name, last_name, email()
SELECT p.payment_id, p.amount, p.rental_id, c.customer_id, c.first_name, c.last_name, c.email
FROM payment AS p 
INNER JOIN customer AS c ON c.customer_id = p.customer_id
INNER JOIN rental AS r ON r.rental_id = p.rental_id;

-- Verify the Detailed table 
SELECT * FROM detailed;

--D
DROP FUNCTION transform_data();
CREATE OR REPLACE FUNCTION transform_data();
RETURNS TRIGGER 
LANGUAGE plpsql
AS $$
BEGIN
  SELECT
customer_id,
CONCAT(first_name, ' ', last_name) AS customer_name, email,
COUNT (payment_id) AS rental_amount
FROM detailed;
END;
$$;

INSERT INTO summary (
SELECT
CONCAT(last_name, ' ', first_name) AS customer_name, email,
COUNT (payment_id) AS rentals,
SUM (amount) AS rental_amount
FROM detailed
GROUP BY customer_name, email
ORDER BY rentals DESC
LIMIT 10
);

--Verify the Summery Table
SELECT * FROM summary;

--E
CREATE OR REPLACE FUNCTION update_summary()
RETURNS TRIGGER
LANGUAGE plpsql
AS $$
BEGIN
DELETE FROM summary;
INSERT INTO summary;
  customer_name, email, rentals, rental_amount)
SELECT
customer_id,
CONCAT(last_name, ' ', first_name) AS customer_name, email,
COUNT (payment_id) AS rentals,
SUM (amount) AS rental_amount
FROM detailed 
GROUP BY rentals DESC
LIMIT 10; 
RETURN NEW;
END;
$$;

CREATE TRIGGER update_summary
AFTER INSERT ON detailed
FOR EACH STATEMENT
EXECUTE PROCEDURE transform_data();

/* F. This procedure should be run at least monthly before awarding points and business meetings to ensure that the information is current and accurate for both the detailed and summary report. Data freshness correctly identifies the top ten renters for that month. */

CREATE PROCEDURE refresh_data()
LANGUAGE plpgsql
AS $$
BEGIN
DELETE FROM summary;
DELETE FROM detailed;
INSERT INTO detailed (
payment_id, amount, rental_id, rental_date, customer_id, first_name, last_name, email)
SELECT p.payment_id, p.amount, p.rental_id, r.rental_date,
c.customer_id, c.first_name, c.last_name, c.email
FROM payment AS p
INNER JOIN customer AS c ON c.customer_id = p.customer_id
INNER JOIN rental AS r ON r.rental_id = p.rental_id
INNER JOIN inventory AS i ON i.inventory_id = r.inventory_id;

END;
$$;